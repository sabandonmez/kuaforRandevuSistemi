package ybsGroup.kuaforRandevuSistemi.business.concretes;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import ybsGroup.kuaforRandevuSistemi.business.abstracts.AppointmentService;
import ybsGroup.kuaforRandevuSistemi.business.requests.appointment.CreateAppointmentRequest;
import ybsGroup.kuaforRandevuSistemi.business.responses.appointment.GetAllAppointmentsResponse;
import ybsGroup.kuaforRandevuSistemi.business.rules.AppointmentBusinessRules;
import ybsGroup.kuaforRandevuSistemi.core.utilities.exceptions.AvailableSlotsNotContainsRequestTimeException;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.AppointmentRepository;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.CustomerRepository;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.HairdresserRepository;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.ServiceRepository;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.Appointment;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.Customer;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.Hairdresser;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.enums.Role;

@Service
public class AppointmentManager implements AppointmentService{

	private AppointmentRepository appointmentRepository;
	private CustomerRepository customerRepository;
	private HairdresserRepository hairdresserRepository;
	private ServiceRepository serviceRepository;
	private AppointmentBusinessRules appointmentBusinessRules;
	
	


	public AppointmentManager(AppointmentRepository appointmentRepository, CustomerRepository customerRepository,
			HairdresserRepository hairdresserRepository,AppointmentBusinessRules appointmentBusinessRules) {
		super();
		this.appointmentRepository = appointmentRepository;
		this.customerRepository = customerRepository;
		this.hairdresserRepository = hairdresserRepository;
		this.appointmentBusinessRules=appointmentBusinessRules;
	}




	@Override
	public void add(CreateAppointmentRequest createAppointmentRequest) {
	    // Create a LocalDateTime from the separate date and time fields
	    LocalDateTime appointmentDateTime = LocalDateTime.of(
	        createAppointmentRequest.getAppointmentDate(),
	        createAppointmentRequest.getAppointmentTime()
	    );

	    // Hizmetlerin toplam süresini hesaplayın
	    int totalServiceDuration = appointmentBusinessRules.calculateTotalDuration(createAppointmentRequest.getServicesId());

	    // Müsait zaman dilimlerini bulun
	    List<LocalTime> availableSlots = appointmentBusinessRules.findAvailableSlots(
	        createAppointmentRequest.getHairdresserId(),
	        createAppointmentRequest.getAppointmentDate(),
	        totalServiceDuration
	    );

	    LocalTime requestedTime = createAppointmentRequest.getAppointmentTime();
	    LocalTime endOfAppointment = requestedTime.plusMinutes(totalServiceDuration);

	    // İstenen zaman ve hizmet süresi boyunca herhangi bir zaman diliminin müsait olup olmadığını kontrol edin
	    boolean isTimeAvailable = availableSlots.stream().anyMatch(slot -> 
	        !slot.isBefore(requestedTime) && slot.plusMinutes(totalServiceDuration).isBefore(endOfAppointment)
	    );

	    if (!isTimeAvailable) {
	        throw new AvailableSlotsNotContainsRequestTimeException("The requested appointment time is not available. "
	            + "Please choose a different time or check available slots.");
	    }

	    // Randevu oluştur
	    Appointment appointment = new Appointment();
	    Customer customer = customerRepository.findById(createAppointmentRequest.getCustomerId()).orElseThrow();
	    Hairdresser hairdresser = hairdresserRepository.findById(createAppointmentRequest.getHairdresserId()).orElseThrow();

	    appointment.setCustomer(customer);
	    appointment.setHairdresser(hairdresser);
	    Set<ybsGroup.kuaforRandevuSistemi.entities.concretes.Service> services = createAppointmentRequest.getServicesId().stream()
	        .map(serviceId -> serviceRepository.findById(serviceId).orElseThrow())
	        .collect(Collectors.toSet());

	    appointment.setServices(services);
	    appointment.setAppointmentTime(appointmentDateTime);
	    appointment.setNotes(createAppointmentRequest.getNotes());

	    // Randevuyu kaydet
	    this.appointmentRepository.save(appointment);
	}



	@Override
	public List<GetAllAppointmentsResponse> getAllAppointmentByRole(Role role,int userId) {
		List<Appointment> appointments ;
		
		if (role==Role.ADMIN) {
			appointments = appointmentRepository.findAll();	
		}
		else if(role==Role.CUSTOMER)
		{
			appointments = appointmentRepository.findByCustomerId(userId);
		}
		else {
			appointments = appointmentRepository.findByHairdresserId(userId);
		}
		return appointments.stream().map(this::convertToResponse).collect(Collectors.toList());
	}
	
	private GetAllAppointmentsResponse convertToResponse(Appointment appointment) {
		GetAllAppointmentsResponse response = new GetAllAppointmentsResponse();
		response.setHairdresserName(appointment.getHairdresser().getFirstName()+" "+appointment.getHairdresser().getLastName());
		response.setCustomerName(appointment.getCustomer().getFirstName()+" "+appointment.getCustomer().getLastName());
		response.setServicesName(appointment.getServices().stream()
                .map(ybsGroup.kuaforRandevuSistemi.entities.concretes.Service::getServiceName)
                .collect(Collectors.toList()));
		response.setAppointmentTime(appointment.getAppointmentTime());
		response.setNotes(appointment.getNotes());
		return response;
	}



	
	
}
