package ybsGroup.kuaforRandevuSistemi.business.concretes;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import ybsGroup.kuaforRandevuSistemi.business.abstracts.AppointmentService;
import ybsGroup.kuaforRandevuSistemi.business.requests.appointment.CreateAppointmentRequest;
import ybsGroup.kuaforRandevuSistemi.business.responses.appointment.GetAllAppointmentsResponse;
import ybsGroup.kuaforRandevuSistemi.business.rules.AppointmentBusinessRules;
import ybsGroup.kuaforRandevuSistemi.core.utilities.exceptions.AvailableSlotsNotContainsRequestTimeException;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.AppointmentRepository;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.CustomerRepository;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.HairdresserRepository;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.ServiceRepository;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.Appointment;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.Customer;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.Hairdresser;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.enums.Role;

@Service
public class AppointmentManager implements AppointmentService{

	private AppointmentRepository appointmentRepository;
	private CustomerRepository customerRepository;
	private HairdresserRepository hairdresserRepository;
	private ServiceRepository serviceRepository;
	private AppointmentBusinessRules appointmentBusinessRules;
	
	


	public AppointmentManager(AppointmentRepository appointmentRepository, CustomerRepository customerRepository,
			HairdresserRepository hairdresserRepository,AppointmentBusinessRules appointmentBusinessRules) {
		super();
		this.appointmentRepository = appointmentRepository;
		this.customerRepository = customerRepository;
		this.hairdresserRepository = hairdresserRepository;
		this.appointmentBusinessRules=appointmentBusinessRules;
	}




	@Override
	public void createAppointment(CreateAppointmentRequest createAppointmentRequest) {
		return null;
	}


	@Override
	public List<GetAllAppointmentsResponse> getAllAppointmentByRole(Role role,int userId) {
		List<Appointment> appointments ;
		
		if (role==Role.ADMIN) {
			appointments = appointmentRepository.findAll();	
		}
		else if(role==Role.CUSTOMER)
		{
			appointments = appointmentRepository.findByCustomerId(userId);
		}
		else {
			appointments = appointmentRepository.findByHairdresserId(userId);
		}
		return appointments.stream().map(this::convertToResponse).collect(Collectors.toList());
	}
	
	private GetAllAppointmentsResponse convertToResponse(Appointment appointment) {
		GetAllAppointmentsResponse response = new GetAllAppointmentsResponse();
		response.setHairdresserName(appointment.getHairdresser().getFirstName()+" "+appointment.getHairdresser().getLastName());
		response.setCustomerName(appointment.getCustomer().getFirstName()+" "+appointment.getCustomer().getLastName());
		response.setServicesName(appointment.getServices().stream()
                .map(ybsGroup.kuaforRandevuSistemi.entities.concretes.Service::getServiceName)
                .collect(Collectors.toList()));
		response.setAppointmentTime(appointment.getAppointmentTime());
		response.setNotes(appointment.getNotes());
		return response;
	}

	@Override
    public List<LocalTime> findAvailableSlots(int hairdresserId, LocalDate date, int totalDuration) {
        LocalTime startTime = LocalTime.of(9, 0); // İş gününün başlangıcı
        LocalTime endTime = LocalTime.of(21, 0); // İş gününün sonu
        List<LocalTime> allTimeSlots = new ArrayList<>();

        // Tüm zaman dilimlerini oluştur
        while (startTime.isBefore(endTime)) {
            allTimeSlots.add(startTime);
            startTime = startTime.plusMinutes(totalDuration);
        }

        // Belirli bir tarihte kuaföre ait mevcut randevuları al
        List<Appointment> appointments = appointmentRepository.findAllByHairdresserIdAndDate(hairdresserId, date);

        // Mevcut randevu zamanlarını çıkararak boş zaman dilimlerini bul
        Set<LocalTime> bookedSlots = appointments.stream()
                .map(appointment -> appointment.getAppointmentTime().toLocalTime())
                .collect(Collectors.toSet());
        allTimeSlots.removeIf(bookedSlots::contains);

        return allTimeSlots;
    }

	
	
}
