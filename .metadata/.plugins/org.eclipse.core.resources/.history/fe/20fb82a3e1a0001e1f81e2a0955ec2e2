package ybsGroup.kuaforRandevuSistemi.business.rules;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import ybsGroup.kuaforRandevuSistemi.core.utilities.helpers.BusinessHoursHelper;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.AppointmentRepository;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.HairdresserRepository;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.ServiceRepository;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.Appointment;


@Service
public class AppointmentBusinessRules {
	private ServiceRepository serviceRepository;
	private HairdresserRepository hairdresserRepository;
	private AppointmentRepository appointmentRepository;
	
	public AppointmentBusinessRules(ServiceRepository serviceRepository, HairdresserRepository hairdresserRepository,
			AppointmentRepository appointmentRepository) {
		this.serviceRepository = serviceRepository;
		this.hairdresserRepository = hairdresserRepository;
		this.appointmentRepository = appointmentRepository;
	}

	public int calculateTotalDuration(Appointment appointment) {
		return appointment.getServices().stream()
				.mapToInt(ybsGroup.kuaforRandevuSistemi.entities.concretes.Service::getDuration)
				.sum();
	}
	
	public List<LocalTime> findAvailableSlots(int hairdresserId , LocalDate date){
		
		List<Appointment> appointments = appointmentRepository.findByHairdresserId(hairdresserId); //kuaförün randevularını dl den aldık.
		
		 List<Appointment> appointmentsForDay = appointments.stream()
		        .filter(appointment -> appointment.getAppointmentTime().toLocalDate().equals(date))
		        .sorted(Comparator.comparing(Appointment::getAppointmentTime)) // kuaförün randvularını getAppointmentTime 'a göre sıraladık.
		        .collect(Collectors.toList());
		
		LocalTime startHour=BusinessHoursHelper.start_hour;
		LocalTime endHour = BusinessHoursHelper.end_hour;
		
	
		
		List<LocalTime> availableSlots = new ArrayList<>();
		LocalTime currentTime = startHour;
		
		for (Appointment appointment : appointmentsForDay) { //mevcut randevuarı geziyorum
			LocalTime appointmentStart = appointment.getAppointmentTime().toLocalTime();
			int totalDuration = calculateTotalDuration(appointment);
			LocalTime appointmentEnd = appointmentStart.plusMinutes(totalDuration);
			
			while(currentTime.plusMinutes(totalDuration)) {
				
			}
		}
		
		
		
		
		
		return null;
	}
	
}
