package ybsGroup.kuaforRandevuSistemi.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import lombok.AllArgsConstructor;
import ybsGroup.kuaforRandevuSistemi.business.abstracts.UserService;
import ybsGroup.kuaforRandevuSistemi.business.requests.customer.CreateCustomerRequest;
import ybsGroup.kuaforRandevuSistemi.business.requests.customer.UpdateCustomerRequest;
import ybsGroup.kuaforRandevuSistemi.business.responses.customer.GetAllCustomerResponse;
import ybsGroup.kuaforRandevuSistemi.business.responses.customer.GetByIdCustomerResponse;
import ybsGroup.kuaforRandevuSistemi.core.utilities.exceptions.CustomerNotFoundException;
import ybsGroup.kuaforRandevuSistemi.core.utilities.mappers.ModelMapperService;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.UserRepository;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.User;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.enums.Role;

@Service
@AllArgsConstructor
public class UserManager implements UserService {
	private final UserRepository userRepository;
    private final ModelMapperService modelMapperService;

    @Override
    public void addCustomer(CreateCustomerRequest request) {
    	User user = new User();
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setPassword(request.getPassword());
        user.setPhoneNumber(request.getPhoneNumber());
        user.setEmail(request.getEmail());
        user.setRole(Role.CUSTOMER);
        userRepository.save(user);
    }

    @Override
    public List<GetAllCustomerResponse> getAllCustomers() {
        List<User> users = userRepository.findByRole(Role.CUSTOMER);
        return users.stream()
                    .map(user -> this.modelMapperService.forResponse().map(user, GetAllCustomerResponse.class))
                    .collect(Collectors.toList());
    }

    @Override
    public GetByIdCustomerResponse getByIdCustomer(int id) {
        User user = userRepository.findById(id)
                                  .orElseThrow(() -> new CustomerNotFoundException("Customer with ID " + id + " not found"));
        if (user.getRole() != Role.CUSTOMER) {
            throw new CustomerNotFoundException("User with ID " + id + " is not a customer");
        }
        return this.modelMapperService.forResponse().map(user, GetByIdCustomerResponse.class);
    }

    @Override
    public void updateCustomer(UpdateCustomerRequest updateCustomerRequest) {
        User user = this.userRepository.findById(updateCustomerRequest.getCustomerId())
                                       .orElseThrow(() -> new CustomerNotFoundException("Customer with ID " + updateCustomerRequest.getCustomerId() + " not found"));
        if (updateCustomerRequest.getFirstName() != null) {
            user.setFirstName(updateCustomerRequest.getFirstName());
        }
        if (updateCustomerRequest.getLastName() != null) {
            user.setLastName(updateCustomerRequest.getLastName());
        }
        userRepository.save(user);
    }

    @Override
    public void deleteCustomer(int id) {
        if (!userRepository.existsById(id)) {
            throw new CustomerNotFoundException("Customer with ID " + id + " not found");
        }
        this.userRepository.deleteById(id);
    }

}
