package ybsGroup.kuaforRandevuSistemi.business.concretes;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import lombok.AllArgsConstructor;
import ybsGroup.kuaforRandevuSistemi.business.abstracts.UserService;
import ybsGroup.kuaforRandevuSistemi.business.requests.customer.CreateCustomerRequest;
import ybsGroup.kuaforRandevuSistemi.business.requests.customer.UpdateCustomerRequest;
import ybsGroup.kuaforRandevuSistemi.business.responses.customer.GetAllCustomerResponse;
import ybsGroup.kuaforRandevuSistemi.business.responses.customer.GetByIdCustomerResponse;
import ybsGroup.kuaforRandevuSistemi.core.utilities.exceptions.CustomerNotFoundException;
import ybsGroup.kuaforRandevuSistemi.core.utilities.mappers.ModelMapperService;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.UserRepository;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.User;

@Service
@AllArgsConstructor
public class UserManager implements UserService {
	private final UserRepository userRepository;
	private final ModelMapperService modelMapperService;
	@Override
	public void addCustomer(CreateCustomerRequest createCustomerRequest) {
	User user = this.modelMapperService.forRequest().map(createCustomerRequest, User.class);
	this.userRepository.save(user);
		
	}
	@Override
	public List<GetAllCustomerResponse> getAllCustomers() {
		List<User> users = userRepository.findAll();
		List<GetAllCustomerResponse> customersResponse = users.stream().map(
				customer -> this.modelMapperService.forResponse().map(customer, GetAllCustomerResponse.class))
				.collect(Collectors.toList());
		return customersResponse;
	}
	@Override
	public GetByIdCustomerResponse getByIdCustomer(int id) {
		User user = userRepository.findById(id).orElseThrow();
		GetByIdCustomerResponse response = this.modelMapperService.forResponse().map(user,GetByIdCustomerResponse.class);
		return response;
	}
	@Override
	public void updateCustomer(UpdateCustomerRequest updateCustomerRequest) {
		    User user = this.userRepository.findById(updateCustomerRequest.getCustomerId()).orElseThrow();
		    if (user == null) {
		        throw new CustomerNotFoundException("Customer with ID " + updateCustomerRequest.getCustomerId() + " not found");
		    }
		    if (updateCustomerRequest.getFirstName() != null) {
		    	user.setFirstName(updateCustomerRequest.getFirstName());
		    }
		    if (updateCustomerRequest.getLastName() != null) {
		    	user.setLastName(updateCustomerRequest.getLastName());
		    }
		    userRepository.save(user);
		
	}
	@Override
	public void deleteCustomer(int id) {
		this.userRepository.deleteById(id);
		
	}

}
