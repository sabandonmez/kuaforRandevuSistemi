package ybsGroup.kuaforRandevuSistemi.business.rules;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Iterator;
import java.util.List;

import org.springframework.stereotype.Service;

import ybsGroup.kuaforRandevuSistemi.core.utilities.helpers.BusinessHoursHelper;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.HairdresserRepository;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.ServiceRepository;


@Service
public class AppointmentBusinessRules {
	private final ServiceRepository serviceRepository;
	private final HairdresserRepository hairdresserRepository;
	public AppointmentBusinessRules(ServiceRepository serviceRepository, HairdresserRepository hairdresserRepository) {
		this.serviceRepository = serviceRepository;
		this.hairdresserRepository = hairdresserRepository;
	}
	
	public int calculateTotalDuration(List<Integer> servicesId) {
		return servicesId.stream()
				.mapToInt(serviceId -> {
				ybsGroup.kuaforRandevuSistemi.entities.concretes.Service service = this.serviceRepository.findById(serviceId).orElseThrow();
				return service.getDuration();
				}).sum();
	}
	
	public LocalDateTime findAvailableTimeSlot(int hairdresserId , int duration) {
		LocalDate today = LocalDate.now();
		LocalDateTime possibleStart;
		LocalDateTime endOfWorkingDay;
		
		for (int i = 0; i < 7; i++) {
			LocalDate day = today.plusDays(i);
			if (BusinessHoursHelper.working_days.contains(day.getDayOfWeek())) {
				possibleStart = LocalDateTime.of(day, BusinessHoursHelper.start_hour);
				endOfWorkingDay = LocalDateTime.of(day, BusinessHoursHelper.end_hour);
				
				while (possibleStart.plusMinutes(duration).isBefore(endOfWorkingDay)) {
					return possibleStart;
					possibleStart = possibleStart.plusMinutes(15);
				}
			}
		}
	}
	
	
}
