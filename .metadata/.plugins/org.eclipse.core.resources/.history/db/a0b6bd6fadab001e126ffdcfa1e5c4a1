package ybsGroup.kuaforRandevuSistemi.webApi.controllers;

import java.time.LocalDate;
import java.time.LocalTime;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import lombok.AllArgsConstructor;
import ybsGroup.kuaforRandevuSistemi.business.abstracts.AppointmentService;
import ybsGroup.kuaforRandevuSistemi.business.requests.appointment.CreateAppointmentRequest;
import ybsGroup.kuaforRandevuSistemi.business.responses.appointment.GetAllAppointmentsResponse;
import ybsGroup.kuaforRandevuSistemi.dataAccess.abstracts.ServiceRepository;
import ybsGroup.kuaforRandevuSistemi.entities.concretes.Service;

@RestController
@RequestMapping("/api/appointments")
@AllArgsConstructor
@CrossOrigin
public class AppointmentController {
	
private AppointmentService appointmentService;
private ServiceRepository serviceRepository;
@PostMapping("/add-appointment")
public void add(CreateAppointmentRequest createAppointmentRequest) {
	this.appointmentService.add(createAppointmentRequest);
}

@GetMapping("get-all-appointment")
public List<GetAllAppointmentsResponse> getAll() {
	return this.appointmentService.getAll();
}

@GetMapping("/available-slots")
public List<LocalTime> getAvailableSlots(@RequestParam int workerId, 
                                         @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
                                         @RequestParam List<Integer> serviceIds) {

    List<Service> selectedServices = serviceIds.stream()
                                               .map(id -> serviceRepository.findById(id).orElseThrow())
                                               .collect(Collectors.toList());

    return appointmentService.findAvailableSlots(workerId, date, selectedServices);
}
}
